package unpack

import (
	"io/ioutil"
	. "satellite/utils"
	"sync"
	"testing"
)

func TestRSADecryptGo(t *testing.T) {
	var dest []byte
	var wg sync.WaitGroup
	src := []byte{
		0x20, 0x8D, 0xAA, 0x0F, 0x92, 0xF5, 0x28, 0xBA, 0x93, 0xF1, 0xDF, 0xCA, 0x63, 0xAC, 0xB0, 0x2A,
		0xAA, 0x06, 0xA7, 0x83, 0x5A, 0x15, 0xFB, 0x21, 0x8D, 0x3A, 0x12, 0x3C, 0x59, 0xCC, 0x98, 0x00,
		0xDD, 0xE7, 0x49, 0xF5, 0xE5, 0x9A, 0x6B, 0x01, 0x84, 0xA5, 0x57, 0x6B, 0x81, 0x08, 0xCB, 0x5F,
		0xA4, 0xCE, 0x65, 0x1F, 0xF3, 0x97, 0x16, 0x12, 0x71, 0xAD, 0xAA, 0x0C, 0x76, 0x35, 0xC1, 0x30,
		0xB9, 0xEC, 0xC1, 0x6B, 0xB7, 0x59, 0x5D, 0xE5, 0xBD, 0x8B, 0x4C, 0xFB, 0xF1, 0xE1, 0x6D, 0x69,
		0x73, 0xD2, 0xA6, 0xB4, 0xB2, 0x7E, 0x8A, 0x4D, 0x84, 0x1E, 0x9C, 0x6B, 0x6A, 0x4E, 0xD8, 0x8A,
		0x1B, 0x5B, 0xFA, 0xC2, 0x38, 0xA9, 0x83, 0x67, 0x71, 0xF1, 0xE9, 0x64, 0x56, 0xCE, 0x7D, 0x9A,
		0xD4, 0x46, 0x12, 0xD1, 0x03, 0xC7, 0xD9, 0x26, 0xCE, 0x1A, 0x53, 0x3F, 0xEB, 0x38, 0xD3, 0xD0,
	}
	wg.Add(1)
	go RSADecryptGo(src, ConstRSAPrivateKey, &dest, &wg)
	wg.Wait()
	err := ioutil.WriteFile("../test/data/unpack/file.txt", dest, 0644)
	if err != nil {
		t.Fatal("Error Write RSA One:", err)
	}
}

func TestRSADecrypt(t *testing.T) {
	src := []byte{
		0x20, 0x8D, 0xAA, 0x0F, 0x92, 0xF5, 0x28, 0xBA, 0x93, 0xF1, 0xDF, 0xCA, 0x63, 0xAC, 0xB0, 0x2A,
		0xAA, 0x06, 0xA7, 0x83, 0x5A, 0x15, 0xFB, 0x21, 0x8D, 0x3A, 0x12, 0x3C, 0x59, 0xCC, 0x98, 0x00,
		0xDD, 0xE7, 0x49, 0xF5, 0xE5, 0x9A, 0x6B, 0x01, 0x84, 0xA5, 0x57, 0x6B, 0x81, 0x08, 0xCB, 0x5F,
		0xA4, 0xCE, 0x65, 0x1F, 0xF3, 0x97, 0x16, 0x12, 0x71, 0xAD, 0xAA, 0x0C, 0x76, 0x35, 0xC1, 0x30,
		0xB9, 0xEC, 0xC1, 0x6B, 0xB7, 0x59, 0x5D, 0xE5, 0xBD, 0x8B, 0x4C, 0xFB, 0xF1, 0xE1, 0x6D, 0x69,
		0x73, 0xD2, 0xA6, 0xB4, 0xB2, 0x7E, 0x8A, 0x4D, 0x84, 0x1E, 0x9C, 0x6B, 0x6A, 0x4E, 0xD8, 0x8A,
		0x1B, 0x5B, 0xFA, 0xC2, 0x38, 0xA9, 0x83, 0x67, 0x71, 0xF1, 0xE9, 0x64, 0x56, 0xCE, 0x7D, 0x9A,
		0xD4, 0x46, 0x12, 0xD1, 0x03, 0xC7, 0xD9, 0x26, 0xCE, 0x1A, 0x53, 0x3F, 0xEB, 0x38, 0xD3, 0xD0,
	}
	r, err := RSADecrypt(src, ConstRSAPrivateKey)
	if err != nil {
		t.Fatal("Error RSA Decrypt:", err)
	}
	err = ioutil.WriteFile("../test/data/unpack/file.txt", r, 0644)
	if err != nil {
		t.Fatal("Error Write RSA One:", err)
	}
}

func BenchmarkRSADecryptGo(b *testing.B) {
	for i := 0; i < b.N; i++ {
		var dest []byte
		var wg sync.WaitGroup
		src := []byte{
			0x20, 0x8D, 0xAA, 0x0F, 0x92, 0xF5, 0x28, 0xBA, 0x93, 0xF1, 0xDF, 0xCA, 0x63, 0xAC, 0xB0, 0x2A,
			0xAA, 0x06, 0xA7, 0x83, 0x5A, 0x15, 0xFB, 0x21, 0x8D, 0x3A, 0x12, 0x3C, 0x59, 0xCC, 0x98, 0x00,
			0xDD, 0xE7, 0x49, 0xF5, 0xE5, 0x9A, 0x6B, 0x01, 0x84, 0xA5, 0x57, 0x6B, 0x81, 0x08, 0xCB, 0x5F,
			0xA4, 0xCE, 0x65, 0x1F, 0xF3, 0x97, 0x16, 0x12, 0x71, 0xAD, 0xAA, 0x0C, 0x76, 0x35, 0xC1, 0x30,
			0xB9, 0xEC, 0xC1, 0x6B, 0xB7, 0x59, 0x5D, 0xE5, 0xBD, 0x8B, 0x4C, 0xFB, 0xF1, 0xE1, 0x6D, 0x69,
			0x73, 0xD2, 0xA6, 0xB4, 0xB2, 0x7E, 0x8A, 0x4D, 0x84, 0x1E, 0x9C, 0x6B, 0x6A, 0x4E, 0xD8, 0x8A,
			0x1B, 0x5B, 0xFA, 0xC2, 0x38, 0xA9, 0x83, 0x67, 0x71, 0xF1, 0xE9, 0x64, 0x56, 0xCE, 0x7D, 0x9A,
			0xD4, 0x46, 0x12, 0xD1, 0x03, 0xC7, 0xD9, 0x26, 0xCE, 0x1A, 0x53, 0x3F, 0xEB, 0x38, 0xD3, 0xD0,
		}
		wg.Add(1)
		go RSADecryptGo(src, ConstRSAPrivateKey, &dest, &wg)
		wg.Wait()
		err := ioutil.WriteFile("../test/data/unpack/file.txt", dest, 0644)
		if err != nil {
			b.Fatal("Error Write RSA One:", err)
		}
	}
}

func BenchmarkRSADecrypt(b *testing.B) {
	for i := 0; i < b.N; i++ {
		src := []byte{
			0x20, 0x8D, 0xAA, 0x0F, 0x92, 0xF5, 0x28, 0xBA, 0x93, 0xF1, 0xDF, 0xCA, 0x63, 0xAC, 0xB0, 0x2A,
			0xAA, 0x06, 0xA7, 0x83, 0x5A, 0x15, 0xFB, 0x21, 0x8D, 0x3A, 0x12, 0x3C, 0x59, 0xCC, 0x98, 0x00,
			0xDD, 0xE7, 0x49, 0xF5, 0xE5, 0x9A, 0x6B, 0x01, 0x84, 0xA5, 0x57, 0x6B, 0x81, 0x08, 0xCB, 0x5F,
			0xA4, 0xCE, 0x65, 0x1F, 0xF3, 0x97, 0x16, 0x12, 0x71, 0xAD, 0xAA, 0x0C, 0x76, 0x35, 0xC1, 0x30,
			0xB9, 0xEC, 0xC1, 0x6B, 0xB7, 0x59, 0x5D, 0xE5, 0xBD, 0x8B, 0x4C, 0xFB, 0xF1, 0xE1, 0x6D, 0x69,
			0x73, 0xD2, 0xA6, 0xB4, 0xB2, 0x7E, 0x8A, 0x4D, 0x84, 0x1E, 0x9C, 0x6B, 0x6A, 0x4E, 0xD8, 0x8A,
			0x1B, 0x5B, 0xFA, 0xC2, 0x38, 0xA9, 0x83, 0x67, 0x71, 0xF1, 0xE9, 0x64, 0x56, 0xCE, 0x7D, 0x9A,
			0xD4, 0x46, 0x12, 0xD1, 0x03, 0xC7, 0xD9, 0x26, 0xCE, 0x1A, 0x53, 0x3F, 0xEB, 0x38, 0xD3, 0xD0,
		}
		r, err := RSADecrypt(src, ConstRSAPrivateKey)
		if err != nil {
			b.Fatal("Error RSA Decrypt:", err)
		}
		err = ioutil.WriteFile("../test/data/unpack/file.txt", r, 0644)
		if err != nil {
			b.Fatal("Error Write RSA One:", err)
		}
	}
}
